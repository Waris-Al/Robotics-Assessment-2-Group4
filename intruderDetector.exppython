{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, False)\nright_drive_smart = Motor(Ports.PORT5, True)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)\ndistance_1 = Distance(Ports.PORT1)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\nmyVariable = 0\ndrivetrain.set_drive_velocity(5, PERCENT)\ndrivetrain.set_turn_velocity(3, PERCENT)\n\n\n\n\ndef intruderDetector():\n    noIntruder = True\n    while noIntruder:\n        \n        if distance_1.object_distance(MM) < 30:\n            digital_out_b.set(True) #Sends signal out to external\n            noIntruder = False\n        else:\n            digital_out_b.set(False) #ensures no false positive\n\n\n        wait(0.5, SECONDS)\n        drivetrain.turn(RIGHT)\n        wait(0.5, SECONDS)\n        drivetrain.stop()\n\n    brain.screen.print(\"Intruder Detected\")\n    brain.screen.next_row()\n    #brain.play_sound(SoundType.TADA)\n    pass\n\nintruderDetector()\n","textLanguage":"python","robotConfig":[{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[1],"name":"distance_1","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{}},{"port":[6],"name":"motor_6","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}